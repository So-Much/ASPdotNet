// <auto-generated />
using System;
using System.Collections.Generic;
using BackEnd.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BackEnd.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20241126085712_update_user_table_avatartype")]
    partial class update_user_table_avatartype
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BackEnd.Database.Tables.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("FK_UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FK_UserId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("BackEnd.Database.Tables.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FK_PostId")
                        .HasColumnType("integer");

                    b.Property<int>("FK_UserId")
                        .HasColumnType("integer");

                    b.Property<int>("NumDislike")
                        .HasColumnType("integer");

                    b.Property<int>("NumLikes")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FK_PostId");

                    b.HasIndex("FK_UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BackEnd.Database.Tables.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("FK_UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SocialMedias")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FK_UserId")
                        .IsUnique();

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("BackEnd.Database.Tables.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("FK_BlogId")
                        .HasColumnType("integer");

                    b.Property<List<string>>("Hashtags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("Images")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<int>("NumDislike")
                        .HasColumnType("integer");

                    b.Property<int>("NumLikes")
                        .HasColumnType("integer");

                    b.Property<string>("ShareLink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("Videos")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("FK_BlogId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("BackEnd.Database.Tables.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("BackEnd.Database.Tables.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int[]>("Roles")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BackEnd.Database.Tables.Admin", b =>
                {
                    b.HasBaseType("BackEnd.Database.Tables.User");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("BackEnd.Database.Tables.Customer", b =>
                {
                    b.HasBaseType("BackEnd.Database.Tables.User");

                    b.Property<int>("history_cost")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("BackEnd.Database.Tables.Photographer", b =>
                {
                    b.HasBaseType("BackEnd.Database.Tables.User");

                    b.Property<string>("Camera")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lens")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Portfolio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Photographer");
                });

            modelBuilder.Entity("BackEnd.Database.Tables.Blog", b =>
                {
                    b.HasOne("BackEnd.Database.Tables.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("FK_UserId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BackEnd.Database.Tables.Comment", b =>
                {
                    b.HasOne("BackEnd.Database.Tables.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("FK_PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Database.Tables.User", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("FK_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("BackEnd.Database.Tables.Contact", b =>
                {
                    b.HasOne("BackEnd.Database.Tables.User", "User")
                        .WithOne("Contact")
                        .HasForeignKey("BackEnd.Database.Tables.Contact", "FK_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEnd.Database.Tables.Post", b =>
                {
                    b.HasOne("BackEnd.Database.Tables.Blog", "Blog")
                        .WithMany("Posts")
                        .HasForeignKey("FK_BlogId");

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("BackEnd.Database.Tables.Blog", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("BackEnd.Database.Tables.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("BackEnd.Database.Tables.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Comments");

                    b.Navigation("Contact");
                });
#pragma warning restore 612, 618
        }
    }
}
